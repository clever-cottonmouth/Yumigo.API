// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yumigo.API.DbContext;

#nullable disable

namespace Yumigo.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524062847_addmenuitemsdata")]
    partial class addmenuitemsdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Yumigo.API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Yumigo.API.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SpecialTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("menuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Appetizer",
                            Description = "Toasted bread with garlic butter and herbs",
                            Image = "garlic_bread.jpg",
                            Name = "Garlic Bread",
                            Price = 5.9900000000000002,
                            SpecialTag = "Vegetarian"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Appetizer",
                            Description = "Spicy buffalo wings with blue cheese dip",
                            Image = "chicken_wings.jpg",
                            Name = "Chicken Wings",
                            Price = 12.99,
                            SpecialTag = "Spicy"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Salad",
                            Description = "Crisp romaine with Caesar dressing and croutons",
                            Image = "caesar_salad.jpg",
                            Name = "Caesar Salad",
                            Price = 8.4900000000000002,
                            SpecialTag = "Vegetarian"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Main Course",
                            Description = "Classic pizza with tomato, mozzarella, and basil",
                            Image = "margherita_pizza.jpg",
                            Name = "Margherita Pizza",
                            Price = 14.99,
                            SpecialTag = "Vegetarian"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Main Course",
                            Description = "Fresh salmon with lemon herb sauce",
                            Image = "grilled_salmon.jpg",
                            Name = "Grilled Salmon",
                            Price = 22.989999999999998,
                            SpecialTag = "Gluten-Free"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Main Course",
                            Description = "Juicy beef patty with lettuce, tomato, and cheese",
                            Image = "beef_burger.jpg",
                            Name = "Beef Burger",
                            Price = 13.99,
                            SpecialTag = ""
                        },
                        new
                        {
                            Id = 7,
                            Category = "Main Course",
                            Description = "Creamy risotto with wild mushrooms",
                            Image = "mushroom_risotto.jpg",
                            Name = "Mushroom Risotto",
                            Price = 16.489999999999998,
                            SpecialTag = "Vegetarian"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Side",
                            Description = "Crispy golden fries with ketchup",
                            Image = "french_fries.jpg",
                            Name = "French Fries",
                            Price = 4.9900000000000002,
                            SpecialTag = "Vegetarian"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Side",
                            Description = "Crispy battered onion rings",
                            Image = "onion_rings.jpg",
                            Name = "Onion Rings",
                            Price = 6.4900000000000002,
                            SpecialTag = "Vegetarian"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Dessert",
                            Description = "Warm chocolate cake with molten center",
                            Image = "lava_cake.jpg",
                            Name = "Chocolate Lava Cake",
                            Price = 7.9900000000000002,
                            SpecialTag = "Indulgent"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Dessert",
                            Description = "Creamy cheesecake with berry compote",
                            Image = "cheesecake.jpg",
                            Name = "Cheesecake",
                            Price = 8.9900000000000002,
                            SpecialTag = ""
                        },
                        new
                        {
                            Id = 12,
                            Category = "Beverage",
                            Description = "Refreshing mint and lime cocktail",
                            Image = "mojito.jpg",
                            Name = "Mojito",
                            Price = 9.9900000000000002,
                            SpecialTag = "Alcoholic"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Beverage",
                            Description = "Chilled coffee with milk and sugar",
                            Image = "iced_coffee.jpg",
                            Name = "Iced Coffee",
                            Price = 4.4900000000000002,
                            SpecialTag = ""
                        },
                        new
                        {
                            Id = 14,
                            Category = "Main Course",
                            Description = "Whole wheat wrap with fresh veggies and hummus",
                            Image = "veggie_wrap.jpg",
                            Name = "Veggie Wrap",
                            Price = 10.99,
                            SpecialTag = "Vegan"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Appetizer",
                            Description = "Chilled shrimp with tangy cocktail sauce",
                            Image = "shrimp_cocktail.jpg",
                            Name = "Shrimp Cocktail",
                            Price = 11.99,
                            SpecialTag = "Gluten-Free"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Main Course",
                            Description = "Fettuccine in creamy Alfredo sauce",
                            Image = "pasta_alfredo.jpg",
                            Name = "Pasta Alfredo",
                            Price = 15.49,
                            SpecialTag = "Vegetarian"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Salad",
                            Description = "Feta, olives, and cucumbers in olive oil dressing",
                            Image = "greek_salad.jpg",
                            Name = "Greek Salad",
                            Price = 9.4900000000000002,
                            SpecialTag = "Vegetarian"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Main Course",
                            Description = "Slow-cooked ribs with smoky BBQ sauce",
                            Image = "bbq_ribs.jpg",
                            Name = "BBQ Ribs",
                            Price = 24.989999999999998,
                            SpecialTag = "Spicy"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Beverage",
                            Description = "Freshly squeezed lemonade with mint",
                            Image = "lemonade.jpg",
                            Name = "Lemonade",
                            Price = 3.9900000000000002,
                            SpecialTag = "Non-Alcoholic"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Dessert",
                            Description = "Classic Italian dessert with coffee and mascarpone",
                            Image = "tiramisu.jpg",
                            Name = "Tiramisu",
                            Price = 8.4900000000000002,
                            SpecialTag = ""
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Yumigo.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Yumigo.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yumigo.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Yumigo.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
